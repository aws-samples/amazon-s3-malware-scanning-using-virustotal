# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

import json
import urllib.parse
import boto3
import requests
import sys
import os

QUARANTINED_BUCKET = os.environ['QUARANTINED_BUCKET']
SCANNED_BUCKET = os.environ['SCANNED_BUCKET']
VT_API_KEY_SECRET = os.environ['VT_API_KEY_SECRET']
SNS_TOPIC_ARN = os.environ['SNS_TOPIC_ARN']

THRESHOLD = int(os.environ['THRESHOLD'])

BASE_URL = 'https://www.virustotal.com/api/v3/files/'

print('Loading function')

s3 = boto3.client('s3')
sns = boto3.client('sns')
secretsmanager = boto3.client('secretsmanager')

def move_object(SourceBucket, SourceKey, DestinationBucket, DestinationKey=None):
    """
    Move an object from one S3 bucket to another (optionally changing its name in the process).
    Comprises a copy operation and then a delete operation.
    """
    if not DestinationKey:
        DestinationKey = SourceKey
    
    try:            
        copy_source = {
            'Bucket': SourceBucket,
            'Key': SourceKey
        }
        s3.copy_object(
            CopySource = copy_source,
            Bucket = DestinationBucket,
            Key = DestinationKey
        )
        s3.delete_object(
            Bucket = SourceBucket,
            Key = SourceKey
        )
    except Exception as e:
        print(e)
        print(f'Error moving file {SourceKey} from bucket {SourceBucket} to {DestinationBucket}.')
        raise e

    return

def lambda_handler(event, context):
    # Get the object from the event and show its content type
    bucket = event['Records'][0]['s3']['bucket']['name']
    key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
    print(f'Analysing object {key} in bucket {bucket}')
    
    try:
        response = s3.head_object(Bucket=bucket, Key=key)
        print("CONTENT TYPE: " + response['ContentType'])
        etag = response['ETag'].strip('"')
        print("ETag: " + etag)
    except Exception as e:
        print(e)
        print(f'Error getting object {key} from bucket {bucket}. Make sure they exist and your bucket is in the same region as this function.')
        raise e 

    # Get the VT API key from Secrets Manager
    print('Getting VT API key from Secrets Manager.')
    try:
        response = secretsmanager.get_secret_value(
            SecretId=VT_API_KEY_SECRET
        )
        vt_api_key = response['SecretString']
    except Exception as e:
        print(e)
        print(f'Error retrieving secret {VT_API_KEY_SECRET}.')
        raise e     
    
    print('Querying VT with the object ETag.')
    headers = {
        'x-apikey' : vt_api_key,
        'Content-Type': 'application/json'
    }
    r = requests.get(BASE_URL + etag, headers=headers, timeout=30)
    data = r.json()
    json_str = json.dumps(data)
    print("Response from VT: " + json_str)

    # Load the JSON to a dict
    resp = json.loads(json_str)
    
    # Inspect results from VT
    if 'error' not in resp:
        analysis_stats = resp['data']['attributes']['last_analysis_stats']
        if analysis_stats['malicious'] > THRESHOLD:
            print('Threshold reached! Object deemed malicous and will be quarantined.')
            result = { 'MD5 file hash':etag, 'VT Analysis Stats': analysis_stats}
            json_result = json.dumps(result, indent = 4)
            print('Findings: ' + json_result)

            print('Sending findings to SNS.')
            try:
                notify = sns.publish(
                    TopicArn=SNS_TOPIC_ARN,   
                    Subject='Malicious File Detected in S3',
                    Message=f'Object {key} from bucket {bucket} has been '+
                    f'identified as malicious by at least {THRESHOLD} anti-'+
                    'virus engines in Virus Total and has been quarantined to'+
                    f' the bucket {QUARANTINED_BUCKET}.\nThe latest analysis '+
                    f'stats from Virus Total follow below:\n{json_result}'
                )
            except Exception as e:
                print(e)
                print(f'Error publishing to SNS topic {SNS_TOPIC_ARN}.')
                raise e      
    
            print('Moving object to quarantine bucket.')
            move_object(
                SourceBucket=bucket,
                SourceKey=key,
                DestinationBucket=QUARANTINED_BUCKET
            )
            return

        else:
            print('VT determines the file clean.')
            print('Moving object to scanned bucket.')
            move_object(
                SourceBucket=bucket,
                SourceKey=key,
                DestinationBucket=SCANNED_BUCKET
            )
            return       
    
    elif resp["error"]["code"] == "NotFoundError":
        print('File was not recognised (malicious or otherwise) by VirusTotal.')
        print('Moving object to scanned bucket.')
        move_object(
            SourceBucket=bucket,
            SourceKey=key,
            DestinationBucket=SCANNED_BUCKET
        )
        return  
        
    elif resp["error"]["code"] == "WrongCredentialsError":
        print('VirusTotal reported an error - object was not scanned.')
        raise Exception('Your VirusTotal API key is incorrect.')
    
    else:
        err = resp["error"]["code"]
        print('VirusTotal reported an error - object was not scanned.')
        raise Exception(err) 
