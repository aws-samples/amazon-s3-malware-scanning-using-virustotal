# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

data "aws_iam_policy_document" "assume_lambda_role" {
  statement {
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }

    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role" "lambda_execution_role" {
  name               = "s3_scanner_lambda_execution_role"
  assume_role_policy = data.aws_iam_policy_document.assume_lambda_role.json
  inline_policy {
    name = "lambda_execution_role_inline_policy"
    policy = templatefile(
      "${path.module}/policies/lambda_execution_role_policy.tftpl",
      {
        input_bucket       = aws_s3_bucket.input_bucket.arn
        vt_secret_id       = aws_secretsmanager_secret.vt_api_key.id
        scanned_bucket     = aws_s3_bucket.scanned_bucket.arn
        quarantined_bucket = aws_s3_bucket.quarantined_bucket.arn
        sns_topic          = aws_sns_topic.this.arn
      }
    )
  }
  managed_policy_arns = [
    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  ]
}

resource "null_resource" "package" {
  triggers = {
    always_run = "${timestamp()}"
  }

  provisioner "local-exec" {
    command = <<EOF
cd lambda_function
pip install --target package -r requirements.txt
cp lambda_function.py package
EOF
  }
}

data "archive_file" "lambda" {
  depends_on  = [null_resource.package]
  type        = "zip"
  source_dir  = "${path.module}/lambda_function/package"
  output_path = "${path.module}/lambda_function/lambda_function.zip"
}

# Simple Lambda function; x-ray tracing not required
# nosemgrep: terraform.aws.security.aws-lambda-x-ray-tracing-not-active.aws-lambda-x-ray-tracing-not-active
resource "aws_lambda_function" "this" {
  #checkov:skip=CKV_AWS_50:X-ray tracing not required
  #checkov:skip=CKV_AWS_116:DLQ not needed; unprocessed images will remain in the input bucket
  #checkov:skip=CKV_AWS_272:Code signing not needed; source code is managed in this repo
  #checkov:skip=CKV_AWS_115:Function level (rather than account level) concurrency limit can be added later if required 
  #checkov:skip=CKV_AWS_117:Attaching this function to a custom VPC adds unneeded complexity; can be added later if required
  filename         = "${path.module}/lambda_function/lambda_function.zip"
  function_name    = "s3-scanner"
  role             = aws_iam_role.lambda_execution_role.arn
  handler          = "lambda_function.lambda_handler"
  runtime          = "python3.10"
  timeout          = 60
  source_code_hash = data.archive_file.lambda.output_base64sha256

  #checkov:skip=CKV_AWS_173: These environment variables are not sensitive; default KMS key is fine
  # nosemgrep: terraform.aws.security.aws-lambda-environment-unencrypted.aws-lambda-environment-unencrypted
  environment {
    variables = {
      VT_API_KEY_SECRET  = aws_secretsmanager_secret.vt_api_key.id
      QUARANTINED_BUCKET = aws_s3_bucket.quarantined_bucket.id
      SCANNED_BUCKET     = aws_s3_bucket.scanned_bucket.id
      SNS_TOPIC_ARN      = aws_sns_topic.this.arn
      THRESHOLD          = var.threshold
    }
  }
}

resource "aws_lambda_permission" "input_bucket_trigger" {
  statement_id   = "AllowExecutionFromInputBucket"
  action         = "lambda:InvokeFunction"
  function_name  = aws_lambda_function.this.function_name
  principal      = "s3.amazonaws.com"
  source_arn     = aws_s3_bucket.input_bucket.arn
  source_account = data.aws_caller_identity.current.account_id
}